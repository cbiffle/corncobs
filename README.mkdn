# `corncobs`: Corny COBS encoding/decoding in Rust

This crate provides [Consistent Overhead Byte Stuffing][cobs] (COBS) support for
Rust programs, with a particular focus on resource-limited embedded `no_std`
targets:

- Provides both fast (buffer-to-buffer) and small (in-place or iterator-based)
  versions of both encode and decode routines.

- Provides a `const fn` for computing the maximum encoded size for a given
  input size, so you can define fixed-size buffers precisely without magic
  numbers.

## COBS in general

COBS lets us take an arbitrary blob of bytes and turn it into a slightly
longer blob that doesn't contain a certain byte, except as a terminator at
the very end. This makes it useful for framing packets on serial lines, or
other contexts where you'd like to be able to detect frame or record
boundaries.

The "slightly longer" part is important. COBS guarantees an upper bound to
the size of the encoded output: the original length, plus two bytes, plus
one byte per 254 input bytes. Other alternatives like SLIP framing can have
worst-case overhead up to 100%, which means to meet your application's
requirements, you may need to reserve up to 50% of bandwidth at all times.

Delightfully, the overhead _decreases_ if the data you're sending contains
the termination byte. This is the opposite of SLIP, and can cause the
average-case overhead to be very nearly zero.

COBS is an example of a _resynchronizable_ framing protocol. An observer can
drop into the stream at any time, without context, and find the next message
boundary after losing at most one message to truncation. While this
description has been focused on communication channels like serial lines,
this resynchronization property means COBS can _also_ be valuable for data
stored on disk, where it might be truncated, or in a circular buffer.

## `corncobs` specifically

`corncobs` implements COBS for the common case where the termination byte is
zero. (COBS can technically be implemented for _any_ termination byte value,
though it's rare to use a value other than zero.) Messages on a stream are
each terminated by a single zero byte, and COBS lets us avoid having other
distracting zero bytes in the middle of a message.

`corncobs` can be used in several different ways, each with different costs
and benefits.

- Encoding
  - `encode_buf`: from one slice to another; efficient, but requires 2x the
     available RAM.
  - `encode_iter`: incremental, using an iterator; somewhat slower, but
    requires no additional memory. (This can be useful in a serial interrupt
    handler.)
- Decoding
  - `decode_buf`: from one slice to another; efficient, but requires 2x the
    available RAM.
  - `decode_in_place`: in-place in a slice; nearly as efficient, but
    overwrites incoming data.

## Cargo `features`

No features are enabled by default. Embedded programmers do not need to specify
`default-features = false` when using `corncobs` because who said `std` should
be the default anyhow? People with lots of RAM, that's who.

Features:

- `std`: if you're on one of them "big computers" with "infinite memory" and can
  afford the inherent nondeterminism of dynamic memory allocation, this feature
  enables routines for encoding to-from `Vec`, and an `Error` impl for
  `CobsError`.

[cobs]: https://en.wikipedia.org/wiki/Consistent_Overhead_Byte_Stuffing
